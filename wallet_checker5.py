import telebot
from mnemonic import Mnemonic
from eth_account import Account
from web3 import Web3
import time
import pickle
import os
from concurrent.futures import ThreadPoolExecutor

# –í–∫–ª—é—á–∞–µ–º HDWallet —Ñ—É–Ω–∫—Ü–∏–∏
Account.enable_unaudited_hdwallet_features()

# –í–∞—à–∏ –∫–ª—é—á–∏
BOT_API_KEY = '7369094582:AAG-ZfcgAIPS44rwiV7xgqz4P268bgdtqbw'

# –°–ø–∏—Å–æ–∫ HTTP-–Ω–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
NODE_URLS = [
    "https://ethereum-rpc.publicnode.com",
    "https://eth.meowrpc.com",
    "https://eth.drpc.org",
    "https://rpc.mevblocker.io/fast",
    "https://rpc.mevblocker.io/fullprivacy",
    "https://eth.rpc.blxrbdn.com",
    "https://rpc.ankr.com/eth",
    "https://rpc.mevblocker.io/fast",
    "https://eth.llamarpc.com",
    "https://rpc.eth.gateway.fm",
    "https://gateway.tenderly.co/public/mainnet",
    "https://eth1.lava.build"
]

# –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –Ω–æ–¥—ã
current_node_index = 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Web3
def get_web3_instance():
    global current_node_index
    for _ in range(len(NODE_URLS)):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–æ–¥—ã –ø–æ –∫—Ä—É–≥—É
        node_url = NODE_URLS[current_node_index]
        w3 = Web3(Web3.HTTPProvider(node_url))

        if w3.is_connected():
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ethereum —á–µ—Ä–µ–∑ {node_url}")
            return w3  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä Web3

        print(f"‚ö†Ô∏è –ù–æ–¥–∞ {node_url} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å...")
        current_node_index = (current_node_index + 1) % len(NODE_URLS)
        time.sleep(1)

    print("üö® –í—Å–µ –Ω–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–π –Ω–æ–¥–µ!")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –Ω–æ–¥–µ
w3 = get_web3_instance()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_API_KEY)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞
CACHE_FILE = 'nonce_cache.pkl'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_cache():
    if os.path.exists(CACHE_FILE):
        with open(CACHE_FILE, 'rb') as f:
            try:
                return pickle.load(f)
            except EOFError:
                return {}
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –≤ —Ñ–∞–π–ª
def save_cache(cache):
    with open(CACHE_FILE, 'wb') as f:
        pickle.dump(cache, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
nonce_cache = load_cache()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
def generate_wallet():
    mnemo = Mnemonic("english")
    seed_phrase = mnemo.generate(strength=128)  # 12 —Å–ª–æ–≤ (128 –±–∏—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏)
    acct = Account.from_mnemonic(seed_phrase)
    address = acct.address
    return seed_phrase, address

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ nonce —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –Ω–æ–¥—ã
def check_activity(address):
    global w3, current_node_index

    if address in nonce_cache:
        return nonce_cache[address]

    attempts = 0
    while attempts < len(NODE_URLS):  # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á—É—é –Ω–æ–¥—É
        try:
            nonce = w3.eth.get_transaction_count(address)
            nonce_cache[address] = nonce  # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return nonce
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–æ–¥–µ {NODE_URLS[current_node_index]}: {e}")
            current_node_index = (current_node_index + 1) % len(NODE_URLS)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–æ–¥—É
            w3 = get_web3_instance()  # –û–±–Ω–æ–≤–ª—è–µ–º Web3
            attempts += 1

    print("üö® –í—Å–µ –Ω–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
    return 0  # –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å—á–∏—Ç–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
def check_multiple_wallets(wallets):
    results = []
    with ThreadPoolExecutor(max_workers=10) as executor:
        future_results = executor.map(lambda wallet: (wallet, check_activity(wallet[1])), wallets)

        for wallet, nonce in future_results:
            results.append((wallet[0], wallet[1], nonce))
            nonce_cache[wallet[1]] = nonce

    save_cache(nonce_cache)
    return results

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ETH-–∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∏–¥-—Ñ—Ä–∞–∑—ã.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
def test_wallet_activity(seed_phrase, message):
    try:
        acct = Account.from_mnemonic(seed_phrase)
        address = acct.address
        nonce = check_activity(address)

        response = (
            f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫:\n"
            f"–°–∏–¥-—Ñ—Ä–∞–∑–∞: {seed_phrase}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (nonce): {nonce}"
        )
        bot.send_message(message.chat.id, response)

        if nonce > 0:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç).")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_wallet
@bot.message_handler(commands=['test_wallet'])
def test_wallet(message):
    test_seed_phrase = "fluid giant mosquito sure prefer truth rare harsh nature urge relax sort"
    test_wallet_activity(test_seed_phrase, message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate
@bot.message_handler(commands=['generate'])
def generate(message):
    bot.send_message(message.chat.id, "–ò—â—É –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    count = 0
    while True:
        wallets = [generate_wallet() for _ in range(10)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 10 –∫–æ—à–µ–ª—å–∫–æ–≤
        activities = check_multiple_wallets(wallets)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–æ–≤

        for seed_phrase, address, nonce in activities:
            count += 1

            if count % 1000 == 0:
                progress_message = f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {count} –∫–æ—à–µ–ª—å–∫–æ–≤. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å: {address}, –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (nonce): {nonce}"
                bot.send_message(message.chat.id, progress_message)

            if nonce > 0:  # –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                response = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–¥-—Ñ—Ä–∞–∑–∞: {seed_phrase}\n–ê–¥—Ä–µ—Å: {address}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {nonce}"
                bot.send_message(message.chat.id, response)
                return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    bot.polling()